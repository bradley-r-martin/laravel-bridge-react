{"version":3,"file":"Controller.stories.0188067e.js","sources":["../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/native.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/hooks/useBridge.ts","../../src/components/Controller/ControllerActionsContext.ts","../../src/components/Controller/ControllerContext.ts","../../src/components/Controller/Controller.tsx","../../src/examples/LoadingIndicator.tsx","../../src/hooks/useController.ts","../../src/hooks/useData.ts","../../src/hooks/useExceptions.ts","../../src/hooks/useStatus.ts","../../src/components/Debugger/Debugger.tsx","../../src/hocs/useBridge.tsx"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { useContext } from 'react'\nimport BridgeContext from '../components/Bridge/BridgeContext'\n\nexport default function useBridge() {\n  const context = useContext(BridgeContext)\n  if (!context) {\n    throw new Error('You cannot use useBridge outside of a Bridge component')\n  }\n  return context\n}\n","import { createContext } from 'react'\n\nexport interface ControllerActionsContext {\n  call: (method: string, payload?: any) => Promise<void>\n  fresh: () => Promise<void>\n  sync: () => Promise<void>\n}\n\nexport default createContext<ControllerActionsContext | null>(null)\n","import { createContext } from 'react'\n\nexport interface ControllerContext {\n  call: (method: string, payload?: any) => Promise<void>\n  sync: () => Promise<void>\n  fresh: () => Promise<void>\n  mount: () => Promise<void>\n  unmount: () => Promise<void>\n  register: () => Promise<void>\n  deregister: () => Promise<void>\n}\n\nexport default createContext<ControllerContext | null>(null)\n","import React, { Dispatch, FunctionComponent, useEffect, useMemo, useRef, useState } from 'react'\nimport ControllerData, {\n  ControllerDataAction,\n  ControllerDataActions,\n  ControllerDataState,\n  hasControllerData,\n} from './ControllerData'\nimport ControllerExceptions, {\n  ControllerExceptionsAction,\n  hasControllerExceptions,\n} from './ControllerExceptions'\nimport ControllerStatus, { ControllerStatusAction, hasControllerStatus } from './ControllerStatus'\n\nimport { get } from 'lodash'\nimport { v4 as uuidv4 } from 'uuid'\nimport useBridge from '../../hooks/useBridge'\nimport ControllerActionsContext from './ControllerActionsContext'\nimport ControllerContext from './ControllerContext'\n\ninterface ControllerProps {\n  controller: string\n  children?: React.ReactNode\n}\n\nexport interface ControllerReference {\n  uuid: string\n  props: any\n  data: ControllerDataState\n  dispatchData: Dispatch<ControllerDataAction>\n  dispatchStatus: Dispatch<ControllerStatusAction>\n  dispatchExceptions: Dispatch<ControllerExceptionsAction>\n}\n\nconst Controller: FunctionComponent<ControllerProps> = (props) => {\n  const { children, ...additionalProps } = props\n  const uuid = useMemo(() => uuidv4(), [])\n  const bridge = useBridge()\n\n  const [mustSync, setMustSync] = useState(false)\n\n  const [exceptions, dispatchExceptions] = hasControllerExceptions()\n  const [data, dispatchData] = hasControllerData()\n  const [statuses, dispatchStatus] = hasControllerStatus()\n\n  const ref = useRef<ControllerReference>({\n    dispatchStatus,\n    dispatchData,\n    dispatchExceptions,\n    data,\n    props,\n    uuid,\n  })\n  ref.current.dispatchStatus = dispatchStatus\n  ref.current.dispatchData = dispatchData\n  ref.current.dispatchExceptions = dispatchExceptions\n  ref.current.data = data\n  ref.current.props = additionalProps\n  ref.current.uuid = uuid\n\n  function call(method: string, payload: any) {\n    return new Promise<void>((resolve) => bridge.call(ref, method, payload).then(resolve))\n  }\n  function sync() {\n    return new Promise<void>((resolve) => bridge.sync(ref).then(resolve))\n  }\n  function fresh() {\n    return new Promise<void>((resolve) => bridge.fresh(ref).then(resolve))\n  }\n  function mount() {\n    return new Promise<void>((resolve) => bridge.mount(ref).then(resolve))\n  }\n  function unmount() {\n    return new Promise<void>((resolve) => bridge.unmount(ref).then(resolve))\n  }\n  function register() {\n    return new Promise<void>((resolve) => bridge.register(ref).then(resolve))\n  }\n  function deregister() {\n    return new Promise<void>((resolve) => bridge.deregister(ref).then(resolve))\n  }\n  function setData(name: string, value: any, instantly = false) {\n    dispatchData({ type: ControllerDataActions.SET, name, value })\n\n    if (instantly) {\n      return new Promise((resolve) => {\n        // Not great, however as react state is async we need to wait for it to be applied before running the sync.\n        // But we also need to return a promise that we are sending to the server.\n        setTimeout(() => {\n          sync().then(resolve)\n        }, 1)\n      })\n    }\n  }\n  function getData(name: string, initial?: any) {\n    return get(data, name, initial)\n  }\n  function getExceptions(name: string) {\n    return get(exceptions, name)\n  }\n\n  useEffect(() => {\n    register()\n    return () => {\n      deregister()\n    }\n  }, [ref])\n\n  useEffect(() => {\n    if (statuses.isRegistered) {\n      mount()\n    }\n    return () => {\n      if (!statuses.isRegistered) {\n        unmount()\n      }\n    }\n  }, [statuses.isRegistered])\n\n  return (\n    <ControllerContext.Provider value={{ call, fresh, mount, unmount, register, deregister, sync }}>\n      <ControllerActionsContext.Provider value={{ call, fresh, sync }}>\n        <ControllerStatus.Provider value={statuses}>\n          <ControllerData.Provider value={[data, setData, getData]}>\n            <ControllerExceptions.Provider value={[exceptions, getExceptions]}>\n              {children}\n            </ControllerExceptions.Provider>\n          </ControllerData.Provider>\n        </ControllerStatus.Provider>\n      </ControllerActionsContext.Provider>\n    </ControllerContext.Provider>\n  )\n}\n\nexport default Controller\n","import React, { FunctionComponent } from 'react'\n\ninterface LoadingIndicatorProps {\n  show: boolean\n}\n\nconst LoadingIndicator: FunctionComponent<LoadingIndicatorProps> = (props) => {\n  const { show } = props\n\n  if (!show) {\n    return <></>\n  }\n  return (\n    <svg\n      className='h-3 w-3 text-slate-500'\n      viewBox='0 0 44 44'\n      xmlns='http://www.w3.org/2000/svg'\n      stroke='currentColor'\n    >\n      <g fill='none' fillRule='evenodd' strokeWidth='2'>\n        <circle cx='22' cy='22' r='1'>\n          <animate\n            attributeName='r'\n            begin='0s'\n            dur='1.8s'\n            values='1; 20'\n            calcMode='spline'\n            keyTimes='0; 1'\n            keySplines='0.165, 0.84, 0.44, 1'\n            repeatCount='indefinite'\n          />\n          <animate\n            attributeName='stroke-opacity'\n            begin='0s'\n            dur='1.8s'\n            values='1; 0'\n            calcMode='spline'\n            keyTimes='0; 1'\n            keySplines='0.3, 0.61, 0.355, 1'\n            repeatCount='indefinite'\n          />\n        </circle>\n        <circle cx='22' cy='22' r='1'>\n          <animate\n            attributeName='r'\n            begin='-0.9s'\n            dur='1.8s'\n            values='1; 20'\n            calcMode='spline'\n            keyTimes='0; 1'\n            keySplines='0.165, 0.84, 0.44, 1'\n            repeatCount='indefinite'\n          />\n          <animate\n            attributeName='stroke-opacity'\n            begin='-0.9s'\n            dur='1.8s'\n            values='1; 0'\n            calcMode='spline'\n            keyTimes='0; 1'\n            keySplines='0.3, 0.61, 0.355, 1'\n            repeatCount='indefinite'\n          />\n        </circle>\n      </g>\n    </svg>\n  )\n}\n\nexport default LoadingIndicator\n","import { useContext } from 'react'\nimport ControllerContext from '../components/Controller/ControllerContext'\n\nexport default function useController() {\n  const context = useContext(ControllerContext)\n  if (!context) {\n    throw new Error('You cannot use useController outside of a Controller component')\n  }\n  return context\n}\n","import { useContext } from 'react'\nimport ControllerData from '../components/Controller/ControllerData'\n\nexport default function useData() {\n  const context = useContext(ControllerData)\n  if (!context) {\n    throw new Error('You cannot use useData outside of a Controller component')\n  }\n  return context\n}\n","import { useContext } from 'react'\nimport ControllerExceptions from '../components/Controller/ControllerExceptions'\n\nexport default function useExceptions() {\n  const context = useContext(ControllerExceptions)\n  if (!context) {\n    throw new Error('You cannot use useExceptions outside of a Controller component')\n  }\n  return context\n}\n","import { useContext } from 'react'\nimport ControllerStatus from '../components/Controller/ControllerStatus'\n\nexport default function useStatus() {\n  const context = useContext(ControllerStatus)\n  if (!context) {\n    throw new Error('You cannot use useStatus outside of a Controller component')\n  }\n  return context\n}\n","import React, { FunctionComponent, useState } from 'react'\n\nimport LoadingIndicator from '../../../src/examples/LoadingIndicator'\nimport useController from '../../hooks/useController'\nimport useData from '../../hooks/useData'\nimport useExceptions from '../../hooks/useExceptions'\nimport useStatus from '../../hooks/useStatus'\nimport Syntax from '../Syntax/Syntax'\n\nconst Button = ({ onClick, active, children }: any) => {\n  const [loading, setLoading] = useState(false)\n  return (\n    <button\n      disabled={loading}\n      className={`${\n        active\n          ? 'bg-slate-100 text-slate-400 pointer-events-none'\n          : 'bg-slate-200 hover:bg-slate-300 text-slate-600'\n      } px-2 p-1 flex items-center justify-center space-x-2 relative text-xs`}\n      onClick={() => {\n        setLoading(true)\n        onClick().then(() => setLoading(false))\n      }}\n    >\n      <LoadingIndicator show={loading} />\n      <span>{children}</span>\n    </button>\n  )\n}\n\nconst CallButton = () => {\n  const { call } = useController()\n  return (\n    <Button\n      onClick={() =>\n        new Promise((resolve) => {\n          call('test', { some: 'data' }).then((response) => {\n            console.log('CALL response', response)\n            resolve(0)\n          })\n        })\n      }\n    >\n      Call\n    </Button>\n  )\n}\nconst MountButton = () => {\n  const { mount } = useController()\n  const { isMounted, isMounting } = useStatus()\n  return (\n    <Button ping={isMounting} active={isMounted} onClick={mount}>\n      Mount\n    </Button>\n  )\n}\nconst UnmountButton = () => {\n  const { unmount } = useController()\n  const { isMounted, isUnmounting } = useStatus()\n  return (\n    <Button ping={isUnmounting} active={!isMounted} onClick={unmount}>\n      Unmount\n    </Button>\n  )\n}\nconst RegisterButton = () => {\n  const { register } = useController()\n  const { isRegistered, isRegistering } = useStatus()\n  return (\n    <Button ping={isRegistering} active={isRegistered} onClick={register}>\n      Register\n    </Button>\n  )\n}\nconst DeregisterButton = () => {\n  const { deregister } = useController()\n  const { isRegistered, isDeregistering } = useStatus()\n  return (\n    <Button ping={isDeregistering} active={!isRegistered} onClick={deregister}>\n      Deregister\n    </Button>\n  )\n}\nconst FreshButton = () => {\n  const { fresh } = useController()\n  return <Button onClick={fresh}>Fresh</Button>\n}\n\nconst Statuses = () => {\n  const { isDispatched, isMounting, isRegistering, isQueued, isProcessing, isSyncing } = useStatus()\n  return (\n    <div className='flex flex-col space-y-1'>\n      <div className='text-xs text-slate-500'>Events</div>\n      <div className='grid grid-cols-2 gap-1'>\n        <div\n          className={`${\n            isRegistering\n              ? 'animate-pulse bg-purple-400 text-purple-700'\n              : 'bg-slate-100 text-slate-300'\n          } text-xs px-2 p-1 relative z-20`}\n        >\n          R\n        </div>\n        <div\n          className={`${\n            isMounting ? 'animate-pulse bg-amber-400 text-amber-700' : 'bg-slate-100 text-slate-300'\n          } text-xs px-2 p-1 relative z-20`}\n        >\n          M\n        </div>\n        <div\n          className={`${\n            isSyncing ? 'animate-pulse bg-pink-400 text-pink-700' : 'bg-slate-100 text-slate-300'\n          } text-xs px-2 p-1 relative z-20`}\n        >\n          S\n        </div>\n        <div\n          className={`${\n            isDispatched ? 'animate-pulse bg-sky-400 text-sky-700' : 'bg-slate-100 text-slate-300'\n          } text-xs px-2 p-1 relative z-20`}\n        >\n          D\n        </div>\n        <div\n          className={`${\n            isQueued ? 'animate-pulse bg-rose-400 text-rose-700' : 'bg-slate-100 text-slate-300'\n          } text-xs px-2 p-1 relative z-20`}\n        >\n          Q\n        </div>\n        <div\n          className={`${\n            isProcessing\n              ? 'animate-pulse bg-emerald-400 text-emerald-700'\n              : 'bg-slate-100 text-slate-300'\n          } text-xs px-2 p-1 relative z-20`}\n        >\n          P\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst Debugger: FunctionComponent = () => {\n  const [data, updateData, getData] = useData()\n  const [exceptions] = useExceptions()\n\n  const [stateKey, setStateKey] = useState('text.var')\n\n  return (\n    <div className='py-4'>\n      <div className='p-2 border border-slate-300 flex relative'>\n        <div className='absolute top-0 transform -translate-y-1/2 text-xs bg-white p-0.5 px-3 rounded-full border border-slate-300'>\n          Controller debugger\n        </div>\n        <div className='flex space-x-4 mt-2 flex-1'>\n          <Statuses />\n          <div className='flex flex-col space-y-1 w-96'>\n            <div className='text-xs text-slate-500'>Actions</div>\n            <div className='gap-1 grid grid-cols-3'>\n              <CallButton />\n              <MountButton />\n              <UnmountButton />\n              <RegisterButton />\n              <DeregisterButton />\n              <FreshButton />\n            </div>\n            <div className='text-xs flex items-center space-x-2'>\n              <div className='text-slate-500'>Update var:</div>\n              <input\n                type='text'\n                value={stateKey}\n                onChange={(e) => setStateKey(e.target.value)}\n                className='bg-slate-100 border border-slate-200 p-1'\n              />\n              <input\n                type='text'\n                value={`${getData(stateKey, '')}`}\n                // ^ Convert all to text\n                onChange={(e) => {\n                  let input: any = e.target.value\n                  if (!isNaN(parseInt(input))) {\n                    input = parseInt(input)\n                  }\n                  if (input === 'true') {\n                    input = true\n                  }\n                  if (input === 'false') {\n                    input = false\n                  }\n\n                  updateData(stateKey, input)\n                }}\n                className='bg-slate-100 border border-slate-200 p-1'\n              />\n            </div>\n            <div className='text-xs flex items-center space-x-2'>\n              <div className='text-slate-500'>instant var:</div>\n              <input\n                type='text'\n                value={stateKey}\n                onChange={(e) => setStateKey(e.target.value)}\n                className='bg-slate-100 border border-slate-200 p-1'\n              />\n              <input\n                type='text'\n                value={`${getData(stateKey, '')}`}\n                // ^ Convert all to text\n                onChange={(e) => {\n                  let input: any = e.target.value\n                  if (!isNaN(parseInt(input))) {\n                    input = parseInt(input)\n                  }\n                  if (input === 'true') {\n                    input = true\n                  }\n                  if (input === 'false') {\n                    input = false\n                  }\n\n                  updateData(stateKey, input, true)\n                }}\n                className='bg-slate-100 border border-slate-200 p-1'\n              />\n            </div>\n          </div>\n          <div className='flex flex-col space-y-1 flex-1'>\n            <div className='text-xs text-slate-500'>State</div>\n            <div\n              className='bg-slate-100 w-full flex-1 p-2 text-xs overflow-auto'\n              style={{ maxHeight: 100 }}\n            >\n              <Syntax json={data} />\n            </div>\n          </div>\n          <div className='flex flex-col space-y-1 flex-1'>\n            <div className='text-xs text-slate-500'>Exceptions</div>\n            <div\n              className='bg-slate-100 w-full flex-1 p-2 text-xs overflow-auto'\n              style={{ maxHeight: 100 }}\n            >\n              <Syntax json={exceptions} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Debugger\n","import React from 'react'\nimport Bridge from '../components/Bridge/Bridge'\n\nexport default function useBridge<T extends object>(Component: React.ComponentType<T>) {\n  const WrapperComponent = (props: T) => {\n    const { ...native } = props\n    return (\n      <Bridge>\n        <Component {...native} />\n      </Bridge>\n    )\n  }\n  WrapperComponent.displayName = 'useBridge(WrapperComponent)'\n  return WrapperComponent\n}\n"],"names":["getRandomValues","rnds8","rng","__name","byteToHex","i","unsafeStringify","arr","offset","randomUUID","native","v4","options","buf","rnds","useBridge","context","useContext","BridgeContext","createContext","Controller","props","children","additionalProps","uuid","useMemo","uuidv4","bridge","useState","exceptions","dispatchExceptions","hasControllerExceptions","data","dispatchData","hasControllerData","statuses","dispatchStatus","hasControllerStatus","ref","useRef","call","method","payload","resolve","sync","fresh","mount","unmount","register","deregister","setData","name","value","instantly","ControllerDataActions","SET","setTimeout","getData","initial","get","getExceptions","useEffect","_jsx","ControllerContext","ControllerActionsContext","ControllerStatus","ControllerExceptions","Controller$1","LoadingIndicator","show","_jsxs","_Fragment","useController","useData","ControllerData","useExceptions","useStatus","Button","onClick","active","loading","setLoading","CallButton","response","console","MountButton","isMounted","isMounting","UnmountButton","isUnmounting","RegisterButton","isRegistered","isRegistering","DeregisterButton","isDeregistering","FreshButton","Statuses","isDispatched","isQueued","isProcessing","isSyncing","Debugger","updateData","stateKey","setStateKey","e","input","Syntax","Component","WrapperComponent","Bridge"],"mappings":"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"}